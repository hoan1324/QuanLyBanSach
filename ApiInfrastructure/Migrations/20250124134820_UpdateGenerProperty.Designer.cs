// <auto-generated />
using System;
using ApiInfrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiInfrastructure.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250124134820_UpdateGenerProperty")]
    partial class UpdateGenerProperty
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApiDomain.Entity.ActionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 218, DateTimeKind.Local).AddTicks(2032));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500) ");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(200) COLLATE Latin1_General_CI_AI");

                    b.HasKey("Id");

                    b.ToTable("ActionLogs", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.Banner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AnnouncementTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 218, DateTimeKind.Local).AddTicks(2600));

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<string>("Media")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(300) COLLATE Latin1_General_CI_AI");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Summary")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .HasMaxLength(300)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(300) COLLATE Latin1_General_CI_AI");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Banners", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(200) COLLATE Latin1_General_CI_AI");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(300) COLLATE Latin1_General_CI_AI");

                    b.Property<string>("CoverType")
                        .HasColumnType("nvarchar(50) COLLATE Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 218, DateTimeKind.Local).AddTicks(3742));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("IssuingUnitID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100) COLLATE Latin1_General_CI_AI");

                    b.Property<Guid>("MenuID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PageNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PublishingHouse")
                        .IsRequired()
                        .HasColumnType("nvarchar(200) COLLATE Latin1_General_CI_AI");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(200) COLLATE Latin1_General_CI_AI");

                    b.Property<string>("Translator")
                        .HasColumnType("nvarchar(200) COLLATE Latin1_General_CI_AI");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("IssuingUnitID");

                    b.HasIndex("MenuID");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.BookGenres", b =>
                {
                    b.Property<Guid>("BookID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenresID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookID", "GenresID");

                    b.HasIndex("GenresID");

                    b.ToTable("BookGenres", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.BookImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("BookID");

                    b.ToTable("BookImages", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.BookRating", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 219, DateTimeKind.Local).AddTicks(7856));

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("UserID", "BookID");

                    b.HasIndex("BookID");

                    b.ToTable("BookRatings", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.BookReview", b =>
                {
                    b.Property<Guid>("BookID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(1,1)");

                    b.Property<int?>("salesTotal")
                        .HasColumnType("int");

                    b.HasKey("BookID");

                    b.ToTable("BookReviews", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200) COLLATE Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 220, DateTimeKind.Local).AddTicks(8792));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(100) COLLATE Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 220, DateTimeKind.Local).AddTicks(9914));

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200) COLLATE Latin1_General_CI_AI");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.Combo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 221, DateTimeKind.Local).AddTicks(1355));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200) COLLATE Latin1_General_CI_AI");

                    b.HasKey("Id");

                    b.ToTable("Combos", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.ComboBook", b =>
                {
                    b.Property<Guid>("ComboID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ComboID", "BookID");

                    b.HasIndex("BookID");

                    b.ToTable("ComboBooks", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 221, DateTimeKind.Local).AddTicks(5556));

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("ParentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookID");

                    b.HasIndex("UserID");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.Genres", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 220, DateTimeKind.Local).AddTicks(7979));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200) COLLATE Latin1_General_CI_AI");

                    b.HasKey("Id");

                    b.ToTable("Genres", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.IssuingUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 221, DateTimeKind.Local).AddTicks(6635));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200) COLLATE Latin1_General_CI_AI");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 221, DateTimeKind.Local).AddTicks(7079));

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("IssuingUnits", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 221, DateTimeKind.Local).AddTicks(9013));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200) COLLATE Latin1_General_CI_AI");

                    b.Property<decimal>("SalaryMax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("SalaryMin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.ToTable("Jobs", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 222, DateTimeKind.Local).AddTicks(1601));

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200) COLLATE Latin1_General_CI_AI");

                    b.Property<Guid>("ParentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Target")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasDefaultValue("_blank");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Menus", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 222, DateTimeKind.Local).AddTicks(2788));

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ClientID");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 222, DateTimeKind.Local).AddTicks(7342));

                    b.Property<decimal>("NetPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("UnitPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("OrderID", "BookID");

                    b.HasIndex("BookID");

                    b.ToTable("OrderDetails", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 217, DateTimeKind.Local).AddTicks(3913));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200) COLLATE Latin1_General_CI_AI");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Permission", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.PermissionRole", b =>
                {
                    b.Property<Guid>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleID", "PermissionID");

                    b.HasIndex("PermissionID");

                    b.ToTable("PermissionRole", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 222, DateTimeKind.Local).AddTicks(9406));

                    b.Property<Guid>("IssuingUnitID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("IssuingUnitID");

                    b.ToTable("Purchase", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.PurchaseDetail", b =>
                {
                    b.Property<Guid>("PurchaseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 223, DateTimeKind.Local).AddTicks(3079));

                    b.Property<decimal>("NetPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("UnitPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("PurchaseID", "BookID");

                    b.HasIndex("BookID");

                    b.ToTable("PurchaseDetails", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.QuestionAndAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(200) COLLATE Latin1_General_CI_AI");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 223, DateTimeKind.Local).AddTicks(5375));

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000) COLLATE Latin1_General_CI_AI");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("QuestionAndAnswer", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 217, DateTimeKind.Local).AddTicks(1914));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200) COLLATE Latin1_General_CI_AI");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.Shipping", b =>
                {
                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Carrier")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 224, DateTimeKind.Local).AddTicks(4351));

                    b.Property<decimal>("ShoppingCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.ToTable("Shipping", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.ShoppingCart", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("UserID", "BookID");

                    b.HasIndex("BookID");

                    b.ToTable("ShoppingCarts", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(100) COLLATE Latin1_General_CI_AI");

                    b.Property<string>("Avatar")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 226, DateTimeKind.Local).AddTicks(1968));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("JobID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<decimal>("Salary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("StaffName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200) COLLATE Latin1_General_CI_AI");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 226, DateTimeKind.Local).AddTicks(3545));

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("JobID");

                    b.ToTable("Staffs", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.SystemConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 226, DateTimeKind.Local).AddTicks(4268));

                    b.Property<string>("Data")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ExData")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("SystemConfigs", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 216, DateTimeKind.Local).AddTicks(6655));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<Guid>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200) COLLATE Latin1_General_CI_AI");

                    b.HasKey("Id");

                    b.HasIndex("RoleID");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.UserPermission", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserID", "PermissionID");

                    b.HasIndex("PermissionID");

                    b.ToTable("UserPermission", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.Warehouse", b =>
                {
                    b.Property<Guid>("BookID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 24, 20, 48, 20, 226, DateTimeKind.Local).AddTicks(7836));

                    b.Property<int>("InventoryQuantity")
                        .HasColumnType("int");

                    b.HasKey("BookID");

                    b.ToTable("WareHouses", (string)null);
                });

            modelBuilder.Entity("ApiDomain.Entity.Book", b =>
                {
                    b.HasOne("ApiDomain.Entity.IssuingUnit", "IssuingUnit")
                        .WithMany("Books")
                        .HasForeignKey("IssuingUnitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiDomain.Entity.Menu", "Menu")
                        .WithMany("Books")
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IssuingUnit");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("ApiDomain.Entity.BookGenres", b =>
                {
                    b.HasOne("ApiDomain.Entity.Book", "Book")
                        .WithMany("BookGenres")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiDomain.Entity.Genres", "Genres")
                        .WithMany("BookGenres")
                        .HasForeignKey("GenresID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genres");
                });

            modelBuilder.Entity("ApiDomain.Entity.BookImage", b =>
                {
                    b.HasOne("ApiDomain.Entity.Book", "Book")
                        .WithMany("BookImages")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("ApiDomain.Entity.BookRating", b =>
                {
                    b.HasOne("ApiDomain.Entity.Book", "Book")
                        .WithMany("BookRatings")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiDomain.Entity.User", "User")
                        .WithMany("BookRatings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiDomain.Entity.BookReview", b =>
                {
                    b.HasOne("ApiDomain.Entity.Book", "Book")
                        .WithMany("BookReviews")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("ApiDomain.Entity.ComboBook", b =>
                {
                    b.HasOne("ApiDomain.Entity.Book", "Book")
                        .WithMany("ComboBooks")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiDomain.Entity.Combo", "Combo")
                        .WithMany("Books")
                        .HasForeignKey("ComboID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Combo");
                });

            modelBuilder.Entity("ApiDomain.Entity.Comment", b =>
                {
                    b.HasOne("ApiDomain.Entity.Book", "Book")
                        .WithMany("Comments")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiDomain.Entity.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiDomain.Entity.Order", b =>
                {
                    b.HasOne("ApiDomain.Entity.Client", "Client")
                        .WithMany("Order")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ApiDomain.Entity.OrderDetail", b =>
                {
                    b.HasOne("ApiDomain.Entity.Book", "Book")
                        .WithMany("OrderDetails")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiDomain.Entity.Order", "Order")
                        .WithMany("Details")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ApiDomain.Entity.PermissionRole", b =>
                {
                    b.HasOne("ApiDomain.Entity.Permission", "Permission")
                        .WithMany("PermissionRoles")
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiDomain.Entity.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ApiDomain.Entity.Purchase", b =>
                {
                    b.HasOne("ApiDomain.Entity.IssuingUnit", "IssuingUnit")
                        .WithMany("Purchases")
                        .HasForeignKey("IssuingUnitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IssuingUnit");
                });

            modelBuilder.Entity("ApiDomain.Entity.PurchaseDetail", b =>
                {
                    b.HasOne("ApiDomain.Entity.Book", "Book")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiDomain.Entity.Purchase", "Purchase")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("PurchaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("ApiDomain.Entity.Shipping", b =>
                {
                    b.HasOne("ApiDomain.Entity.Order", "Order")
                        .WithMany("Shippings")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ApiDomain.Entity.ShoppingCart", b =>
                {
                    b.HasOne("ApiDomain.Entity.Book", "Book")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiDomain.Entity.User", "User")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiDomain.Entity.Staff", b =>
                {
                    b.HasOne("ApiDomain.Entity.Job", "Job")
                        .WithMany("Staffs")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("ApiDomain.Entity.User", b =>
                {
                    b.HasOne("ApiDomain.Entity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ApiDomain.Entity.UserPermission", b =>
                {
                    b.HasOne("ApiDomain.Entity.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiDomain.Entity.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiDomain.Entity.Warehouse", b =>
                {
                    b.HasOne("ApiDomain.Entity.Book", "Book")
                        .WithMany("Warehouses")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("ApiDomain.Entity.Book", b =>
                {
                    b.Navigation("BookGenres");

                    b.Navigation("BookImages");

                    b.Navigation("BookRatings");

                    b.Navigation("BookReviews");

                    b.Navigation("ComboBooks");

                    b.Navigation("Comments");

                    b.Navigation("OrderDetails");

                    b.Navigation("PurchaseDetails");

                    b.Navigation("ShoppingCarts");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("ApiDomain.Entity.Client", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("ApiDomain.Entity.Combo", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("ApiDomain.Entity.Genres", b =>
                {
                    b.Navigation("BookGenres");
                });

            modelBuilder.Entity("ApiDomain.Entity.IssuingUnit", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("ApiDomain.Entity.Job", b =>
                {
                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("ApiDomain.Entity.Menu", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("ApiDomain.Entity.Order", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("Shippings");
                });

            modelBuilder.Entity("ApiDomain.Entity.Permission", b =>
                {
                    b.Navigation("PermissionRoles");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("ApiDomain.Entity.Purchase", b =>
                {
                    b.Navigation("PurchaseDetails");
                });

            modelBuilder.Entity("ApiDomain.Entity.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ApiDomain.Entity.User", b =>
                {
                    b.Navigation("BookRatings");

                    b.Navigation("Comments");

                    b.Navigation("ShoppingCarts");

                    b.Navigation("UserPermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
